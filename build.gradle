import org.opensearch.gradle.test.RestIntegTestTask

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'opensearch.opensearchplugin'
apply plugin: 'opensearch.yaml-rest-test'
apply plugin: 'opensearch.pluginzip'
apply plugin: 'jacoco'

group = 'org.opensearch'

def pluginName = 'ltr'
def pluginDescription = 'Make Opensearch results more relevant.'
def projectPath = 'org.opensearch'
def pathToPlugin = 'ltr'
def pluginClassName = 'LtrQueryParserPlugin'

publishing {
  publications {
    pluginZip(MavenPublication) { publication ->
      pom {
        name = pluginName
        description = pluginDescription
        licenses {
          license {
            name = "The Apache License, Version 2.0"
            url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
          }
        }
        developers {
          developer {
            name = "OpenSearch"
            url = "https://github.com/opensearch-project/search-processor"
          }
        }
      }
    }
  }
}
opensearchplugin {
  name "opensearch-${pluginName}-${plugin_version}.0"
  description pluginDescription
  classname "${projectPath}.${pathToPlugin}.${pluginClassName}"
  licenseFile rootProject.file('LICENSE')
  noticeFile rootProject.file('NOTICE')
}

// This requires an additional Jar not published as part of build-tools
loggerUsageCheck.enabled = false

// No need to validate pom, as we do not upload to maven/sonatype
validateNebulaPom.enabled = false

buildscript {
  ext {
    isSnapshot = "true" == System.getProperty("build.snapshot", "true")
    opensearch_version = System.getProperty("opensearch.version", "2.7.0")
    lucene_version = "9.5.0"
    plugin_version = opensearch_version + ".0"
    if (isSnapshot) {
      opensearch_version += "-SNAPSHOT"
      plugin_version += "-SNAPSHOT"
    }
    println("opensearch_version ${opensearch_version}")
    println("plugin_version ${plugin_version}")
  }

  repositories {
    mavenLocal()
    maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
  }

  dependencies {
    classpath "org.opensearch.gradle:build-tools:${opensearch_version}"
  }
}

repositories {
  mavenLocal()
  maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
  mavenCentral()
  maven { url "https://plugins.gradle.org/m2/" }
}

dependencies {
  implementation "com.github.spullara.mustache.java:compiler:0.9.3"
  implementation "org.opensearch:opensearch:${opensearch_version}"
  implementation "org.opensearch:opensearch-x-content:${opensearch_version}"
  implementation "org.opensearch:opensearch-common:${opensearch_version}"
  implementation "org.opensearch:opensearch-core:${opensearch_version}"
  implementation "org.opensearch:common-utils:${plugin_version}"
  implementation "org.apache.lucene:lucene-expressions:${luceneVersion}"
  implementation 'com.o19s:RankyMcRankFace:0.1.1'
}


allprojects {
  plugins.withId('jacoco') {
    jacoco.toolVersion = '0.8.9'
  }
}


test {
  include '**/*Tests.class'
  finalizedBy jacocoTestReport
}

task integTest(type: RestIntegTestTask) {
  description = "Run tests against a cluster"
  testClassesDirs = sourceSets.test.output.classesDirs
  classpath = sourceSets.test.runtimeClasspath
}
tasks.named("check").configure { dependsOn(integTest) }

integTest {
  // The --debug-jvm command-line option makes the cluster debuggable; this makes the tests debuggable
  if (System.getProperty("test.debug") != null) {
    jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005'
  }
}

testClusters.integTest {
  testDistribution = "INTEG_TEST"

  // This installs our plugin into the testClusters
  plugin(project.tasks.bundlePlugin.archiveFile)
}

run {
  useCluster testClusters.integTest
}

sourceSets {
  main {
    resources {
      srcDirs = ["config"]
      includes = ["**/*.yml"]
    }
  }
}

jacocoTestReport {
  dependsOn test
  reports {
    xml.required = true
    html.required = true
  }
}

// TODO: Enable these checks
dependencyLicenses.enabled = false
thirdPartyAudit.enabled = false
loggerUsageCheck.enabled = false